(omod MC-SMART-HOME is
	including SM-SMART-HOME .
	including FM-SMART-HOME .
	including MODEL-CHECKER .
	protecting LTL-SIMPLIFIER .
	including SATISFACTION .
	
	*** ===== SMART HOME CONFIGURATIONS =====
	ops simpleColdRoom simpleHotRoom simpleCO2Room completeRoom twoRooms : -> Configuration .

  	eq simpleColdRoom =
    < "temp" : Sensor | room : "living", value : 16, type : "temperature" >
    < "heater" : Actuator | room : "living", isActive : false, type : "heater" > 
    < "fan" : Actuator | room : "living", isActive : false, type : "fan" > 
	< "window" : Actuator | room : "living", isActive : false, type : "window" > .
	
  	eq simpleHotRoom =
    < "temp" : Sensor | room : "living", value : 28, type : "temperature" >
    < "fan" : Actuator | room : "living", isActive : false, type : "fan" > 
    < "heater" : Actuator | room : "living", isActive : false, type : "heater" > 
    < "window" : Actuator | room : "living", isActive : false, type : "window" > .

	eq simpleCO2Room =
    < "co2" : Sensor | room : "living", value : 1150, type : "CO2" >
    < "window" : Actuator | room : "living", isActive : false, type : "window" > 
    < "heater" : Actuator | room : "living", isActive : false, type : "heater" > 
    < "fan" : Actuator | room : "living", isActive : false, type : "fan" > .
    
    eq completeRoom =
    < "co2" : Sensor | room : "living", value : 1150, type : "CO2" >
    < "temp" : Sensor | room : "living", value : 23, type : "temperature" >
    < "window" : Actuator | room : "living", isActive : false, type : "window" > 
    < "heater" : Actuator | room : "living", isActive : false, type : "heater" > 
    < "fan" : Actuator | room : "living", isActive : false, type : "fan" > .
    
    eq twoRooms = 
    < "temp1" : Sensor | room : "living", value : 17, type : "temperature" >
    < "heater1" : Actuator | room : "living", isActive : false, type : "heater" > 
    < "fan1" : Actuator | room : "living", isActive : false, type : "fan" > 
    < "temp2" : Sensor | room : "kitchen", value : 27, type : "temperature" >
    < "heater2" : Actuator | room : "kitchen", isActive : false, type : "heater" > 
    < "fan2" : Actuator | room : "kitchen", isActive : false, type : "fan" > . 
    
    
*** Make System (Configuration) compatible with model checker ***
	subsort Configuration < State .

	vars S A : Oid . 
	var V : Int .
	var R : String .
	var C : Configuration .
	
	*** CO2 is high (> 1000)
	op co2High : -> Prop .
	eq < S : Sensor | value : V, type : "CO2", room : R > C |= co2High = V > 1000 .
	eq C |= co2High = false [owise] .
	
	*** Heater is ON
	op heaterOn : -> Prop .
	eq < A : Actuator | isActive : true, type : "heater", room : R > C |= heaterOn = true .
	eq C |= heaterOn = false [owise] .
	
	*** Heater is OFF
	op heaterOff : -> Prop .
	eq < A : Actuator | isActive : false, type : "heater", room : R > C |= heaterOff = true .
	eq C |= heaterOff = false [owise] .
	
	*** Fan is ON
	op fanOn : -> Prop .
	eq < A : Actuator | isActive : true, type : "fan", room : R > C |= fanOn = true .
	eq C |= fanOn = false [owise] .
	
	*** Fan is OFF
	op fanOff : -> Prop .
	eq < A : Actuator | isActive : false, type : "fan", room : R > C |= fanOff = true .
	eq C |= fanOff = false [owise] .
	
	*** Window is OPEN
	op windowOpen : -> Prop .
	eq < A : Actuator | isActive : true, type : "window", room : R > C |= windowOpen = true .
	eq C |= windowOpen = false [owise] .
	
	*** Window is CLOSED
	op windowClosed : -> Prop .
	eq < A : Actuator | isActive : false, type : "window", room : R > C |= windowClosed = true .
	eq C |= windowClosed = false [owise] .

	*** Temperature is low (< 20)
	op tempLow : -> Prop .
	eq < S : Sensor | value : V, type : "temperature", room : R > C |= tempLow = V < 20 .
	eq C |= tempLow = false [owise] .
	
	*** Temperature is high (> 26)
	op tempHigh : -> Prop .
	eq < S : Sensor | value : V, type : "temperature", room : R > C |= tempHigh = V > 25 .
	eq C |= tempHigh = false [owise] .
	
    *** If it's cold and heater is off, eventually heater must turn on
  	op heaterResponse : -> Formula .
  	eq heaterResponse = [] (tempLow /\ heaterOff -> <> heaterOn) .

  	*** If it's hot and fan is off, eventually fan must turn on
  	op fanResponse : -> Formula .
  	eq fanResponse = [] (tempHigh /\ fanOff -> <> fanOn) . 
  	
  	*** Heater and Fan should never be on at the same time
  	op heaterAndFanNotOnSimultaneously : -> Formula .
  	eq heaterAndFanNotOnSimultaneously = [] ~(heaterOn /\ fanOn) .
  	
  	*** Heater should not immediately turn off in the next step, unless the temperature is high (above 26°C)
  	op noHeaterOscillation : -> Formula .
	eq noHeaterOscillation = [] ((heaterOn /\ O (~ heaterOn)) -> tempHigh) .
  	
  	*** If CO₂ levels are high, the system must eventually open the window
	op co2TriggersWindow : -> Formula .
	eq co2TriggersWindow = [] (co2High -> <> windowOpen) .
	
	*** If CO₂ levels return to normal but the window is open, they should eventually close
	op windowClosesAfterCO2Drops : -> Formula .
	eq windowClosesAfterCO2Drops = [] (((~ co2High) /\ windowOpen) -> <> windowClosed) .

endom)

*** ==== TESTING SYSTEM BEHAVIOR ====

*** (rew [2] simpleHotRoom .)
*** fan turns on and decreases temperature
*** (rew [9] simpleHotRoom .)
*** temperature has reached comfortable level, fan turns off

*** (rew [2] simpleColdRoom .)
*** heater turns on and increases temperature
*** (rew [7] simpleColdRoom .)
*** temperature has reached comfortable level, heater turns off

*** (rew [3] simpleCO2Room .)
*** window opens and decreases co2
*** (rew [21] simpleCO2Room .)
*** co2 is at comfortable level, windows closes

*** (rew [9] completeRoom .)
*** the window has opened and reduced co2 and temperature
*** (rew [13] completeRoom .)
*** window is still open but heater has also turned on due to the temperature dropping

*** (rew [3] twoRooms .)
*** a fan and a heater have turned on in seperate rooms
*** (rew [9] twoRooms .)
*** both actuators are still on and still affect the sensors


*** ==== MODEL CHECKING ====
*** (red modelCheck(simpleColdRoom, <> heaterOn) .)
*** expected true

*** (red modelCheck(simpleHotRoom, <> fanOn) .)
*** expected true

*** (red modelCheck(simpleHotRoom, <> heaterOn) .)
*** expected counterexample

*** (red modelCheck(simpleCO2Room, <> windowOpen) .)
*** Expected true 

*** (red modelCheck(twoRooms, <> heaterOn /\ <> fanOn) .)
*** Expected true 

*** (red modelCheck(twoRooms, heaterResponse) .)
*** Expected true 

*** (red modelCheck(twoRooms, fanResponse) .)
*** Expected true 

*** (red modelCheck(twoRooms, fanResponse /\ heaterResponse) .)
*** Expected true 

*** (red modelCheck(simpleColdRoom, heaterAndFanNotOnSimultaneously) .)
*** Expected: true — fan and heater are initially off, and can't be on together

*** (red modelCheck(simpleColdRoom, noHeaterOscillation) .)
*** Expected: true — heater should not toggle off unless tempHigh

*** (red modelCheck(simpleCO2Room, co2TriggersWindow) .)
*** (red modelCheck(completeRoom, co2TriggersWindow) .)
*** Expected: true — system opens window when CO₂ is high

*** (red modelCheck(simpleCO2Room, windowClosesAfterCO2Drops) .)
*** Expected: true — once CO₂ drops, the window should close
